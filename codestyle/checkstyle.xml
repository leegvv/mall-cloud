<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
        "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
        "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">
<module name="Checker">
    <!-- 检查文件是否以一个空行结束 -->
    <module name="NewlineAtEndOfFile"/>

    <!-- 文件长度不超过1500行 -->
    <module name="FileLength">
        <property name="max" value="1500"/>
    </module>

    <!-- 长度检查 -->
    <!-- 每行不超过120个字符 -->
    <module name="LineLength">
        <property name="max" value="120" />
    </module>

    <!-- 每个java文件一个语法树 -->
    <module name="TreeWalker">
        <!-- import检查-->
        <!-- 避免使用* -->
        <module name="AvoidStarImport">
            <property name="excludes" value="java.io,java.net,java.lang.Math"/>
            <!-- 实例；import java.util.*;.-->
            <property name="allowClassImports" value="false"/>
            <!-- 实例 ；import static org.junit.Assert.*;-->
            <property name="allowStaticMemberImports" value="true"/>
        </module>
        <!-- 检查是否从非法的包中导入了类 -->
        <module name="IllegalImport"/>
        <!-- 检查是否导入了多余的包 -->
        <module name="RedundantImport"/>
        <!-- 没用的import检查，比如：1.没有被用到2.重复的3.import java.lang的4.import 与该类在同一个package的 -->
        <module name="UnusedImports" />
        <!--　检查导入包的顺序/分组
           groups: 定义导入包的顺序，默认以字母顺序导入
　　　　    ordered: 定义包是否必须按规定的顺序显示
　　　　    separated: 定义包与包之间是否应添加空白行
　　　　    caseSensitive: 是否区分包名的大小写　-->
        <!--<module name="ImportOrder">
            <property name="groups" value="java,javax"/>
            <property name="ordered" value="true"/>
            <property name="separated" value="true"/>
            <property name="caseSensitive" value="true"/>
        </module>-->


        <!-- 注释检查 -->
        <!-- 检查类和接口的javadoc 默认不检查author 和version tags
            authorFormat: 检查author标签的格式
            versionFormat: 检查version标签的格式
            scope: 可以检查的类的范围，例如：public只能检查public修饰的类，private可以检查所有的类
            excludeScope: 不能检查的类的范围，例如：public，public的类将不被检查，但访问权限小于public的类仍然会检查，其他的权限以此类推
            tokens: 该属性适用的类型，例如：CLASS_DEF,INTERFACE_DEF -->
        <module name="JavadocType">
            <property name="authorFormat" value="\S"/>
            <property name="scope" value="private"/>
            <property name="versionFormat" value="\$Revision.*\$"/>
            <property name="allowUnknownTags" value="false"/>
            <property name="allowedAnnotations" value="SpringBootApplication, SpringCloudApplication, Configuration, Generated"/>
            <message key="javadoc.missing" value="类注释：缺少Javadoc注释。"/>
        </module>
        <module name="MissingJavadocMethodCheck">
            <!--允许get set 方法没有注释-->
            <property name="allowMissingPropertyJavadoc" value="true"/>
        </module>
        <!-- 检查方法的javadoc的注释
            scope: 可以检查的方法的范围，例如：public只能检查public修饰的方法，private可以检查所有的方法
            allowMissingParamTags: 是否忽略对参数注释的检查
            allowMissingThrowsTags: 是否忽略对throws注释的检查
            allowMissingReturnTag: 是否忽略对return注释的检查 -->
        <module name="JavadocMethod">
            <message key="javadoc.missing" value="方法注释：缺少Javadoc注释。"/>
        </module>
        <!-- 检查变量是否具有Javadoc注释
           scope: 检查变量的范围，例如：public只能检查public修饰的变量，private可以检查所有的变量 -->
        <module name="JavadocVariable"/>
        <module name="JavadocStyle">
            <property name="checkFirstSentence" value="true"/>
            <property name="checkEmptyJavadoc" value="true"/>
        </module>


        <!-- 命名检查 -->
        <!-- 检查抽象类的名称是否遵守命名规约 format: 定义抽象类的命名规则 -->
        <module name="AbstractClassName" />
        <!-- 检查局部final变量的名称是否遵守命名规约
            format: 定义局部常量的命名规则 -->
        <module name="LocalFinalVariableName" />
        <!-- 局部的非final型的变量，包括catch中的参数的检查
            format: 定义局部常量的命名规则 -->
        <module name="LocalVariableName" />
        <!-- 包名的检查（只允许小写字母），默认^[a-z]+(\.[a-zA-Z_][a-zA-Z_0-9_]*)*$ -->
        <module name="PackageName">
            <property name="format" value="^[a-z]+(\.[a-z][a-z0-9]*)*$" />
            <message key="name.invalidPattern" value="包名 ''{0}'' 要符合 ''{1}''格式."/>
        </module>
        <!-- 仅仅是static型的变量（不包括static final型）的检查 -->
        <module name="StaticVariableName" />
        <!-- Class或Interface名检查，默认^[A-Z][a-zA-Z0-9]*$
            format: 定义类和接口的命名规则
　　　　    tokens: 定义规则适用的类型，例如：CLASS_DEF表示类，INTERFACE_DEF 表示接口
        -->
        <module name="TypeName">
            <property name="severity" value="warning"/>
            <message key="name.invalidPattern" value="名称 ''{0}'' 要符合 ''{1}''格式."/>
        </module>
        <!-- 检查成员变量（非静态字段）的名称是否遵守命名规约
            format: 定义非静态成员变量的命名规则
　　　　    applyToPublic: 是否适用于public的成员变量
　　　　    applyToProtected: 是否适用于protected的成员变量
　　　　    applyToPackage: 是否适用于package的成员变量
　　　　    applyToPrivate: 是否适用于private的成员变量 -->
        <module name="MemberName" />
        <!-- 方法名的检查 -->
        <module name="MethodName" />
        <!-- 方法的参数名 -->
        <module name="ParameterName " />
        <!-- 检查常量（用static final修饰的字段）的名称是否遵守命名规约
            format: 定义全局常量的命名规则;
            默认只允许大写^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$ -->
        <module name="ConstantName" />

        <!-- 定义检查 -->
        <!-- 检查数组类型定义的样式 -->
        <module name="ArrayTypeStyle"/>
        <!-- 检查方法/构造器的参数是否是final的。这项检查会忽略接口方法的检查 -->
        <module name="FinalParameters"/>
        <!-- 检查Java代码的缩进是否正确
            basicOffset: 定义代码体相对于所属的代码体的缩进量
　　　　    braceAdjustment: 定义括号的缩进量
　　　　    caseIndent: 定义case的缩进量 -->
        <module name="Indentation">
            <property name="basicOffset" value="4"/>
            <property name="braceAdjustment" value="0"/>
            <property name="caseIndent" value="4"/>
        </module>
        <!-- 检查long型定义是否有大写的“L” -->
        <module name="UpperEll"/>

        <!-- 长度检查 -->
        <!--　检查方法和构造器的长度
            max: 最多容许的行数
　　　　    countEmpty: 是否计算空行
　　　　    tokens: 定义检查的类型 -->
        <module name="MethodLength">
            <property name="tokens" value="METHOD_DEF" />
            <property name="max" value="100" />
        </module>
        <!-- 方法的参数个数不超过5个。 并且不对构造方法进行检查-->
        <module name="ParameterNumber">
            <property name="max" value="10" />
            <property name="ignoreOverriddenMethods" value="true"/>
            <property name="tokens" value="METHOD_DEF" />
        </module>

        <!-- 空格检查-->
        <!-- 方法名后跟左圆括号"(" -->
        <module name="EmptyForIteratorPad"/>
        <!--　检查方法定义、构造器定义、方法调用、构造器调用的标识符和参数列表的左圆括号之间的填充符
            allowLineBreaks: 参数是否允许在不同行
　　　　    option: 在参数和括号、参数和标识符之间是否包含空格
　　　　    tokens: 检查的类型 -->
        <module name="MethodParamPad" />
        <!-- 在类型转换时，不允许左圆括号右边有空格，也不允许与右圆括号左边有空格 -->
        <module name="TypecastParenPad" />
        <!-- 检查在某个特定关键字之后应保留空格 -->
        <module name="NoWhitespaceAfter"/>
        <!-- 检查在某个特定关键字之前应保留空格 -->
        <module name="NoWhitespaceBefore"/>
        <!--　检查代码自动换行时，运算符所处位置的策略
            option: 定义运算符的位置，eol在同一行，nl在下一行
　　　　    tokens: 定义检查的类型 -->
        <module name="OperatorWrap">
            <property name="tokens"
                      value="ASSIGN, DIV, DIV_ASSIGN, PLUS_ASSIGN, MINUS, MINUS_ASSIGN, STAR, STAR_ASSIGN, MOD, MOD_ASSIGN, SR, SR_ASSIGN, BSR, BSR_ASSIGN, SL, SL_ASSIGN, BXOR, BXOR_ASSIGN, BOR, BOR_ASSIGN, BAND, BAND_ASSIGN,PLUS, QUESTION"/>
            <property name="option" value="eol"/>
        </module>
        <!-- 圆括号空白 -->
        <module name="ParenPad"/>
        <!-- 检查分隔符是否在空白之后 -->
        <module name="WhitespaceAfter"/>
        <!-- 检查分隔符周围是否有空白 -->
        <module name="WhitespaceAround"/>

        <!-- 修饰符检查 -->
        <!-- 检查修饰符的顺序是否遵照java语言规范，默认public、protected、private、abstract、static、final、transient、volatile、synchronized、native、strictfp -->
        <module name="ModifierOrder"/>
        <!-- 检查接口和annotation中是否有多余修饰符，如接口方法不必使用public -->
        <module name="RedundantModifier"/>

        <!-- 代码块检查 -->
        <!--　找到嵌套代码块，也就是在代码中无节制使用的代码块
            allowInSwitchCase: 定义是否允许switch case中使用嵌套的代码块 -->
        <module name="AvoidNestedBlocks"/>
        <!-- 检查是否有空代码块 -->
        <module name="EmptyBlock"/>
        <!-- 检查左大括号位置 -->
        <module name="LeftCurly"/>
        <!-- 检查代码块是否缺失{} -->
        <module name="NeedBraces"/>
        <!-- 检查右大括号位置 -->
        <module name="RightCurly"/>

        <!-- 代码检查 -->
        <!-- 检查空的代码段 -->
        <module name="EmptyStatement"/>
        <!-- 检查在重写了equals方法后是否重写了hashCode方法 -->
        <module name="EqualsHashCode"/>
        <!--　检查switch语句中是否存在跨越分支。
        如果一个case分支的代码中缺少break、return、throw或continue语句，那么就会导致跨越分支 -->
        <module name="FallThrough"/>
        <!--　检查变量值没有改动的情况下，该变量是否定义成了final -->
        <module name="FinalLocalVariable">
            <property name="tokens" value="VARIABLE_DEF,PARAMETER_DEF"/>
        </module>
        <!-- 检查局部变量或参数是否隐藏了类中的变量 -->
        <module name="HiddenField">
            <property name="tokens" value="VARIABLE_DEF"/>
        </module>
        <!-- 检查是否使用工厂方法实例化 -->
        <module name="IllegalInstantiation"/>
        <!--　非法异常捕捉,不允许捕捉java.lang.Exception、java.lang.Error、java.lang.RuntimeException的行为 -->
        <module name="IllegalCatch"/>
        <!-- 检查子表达式中是否有赋值操作 -->
        <module name="InnerAssignment"/>
        <!-- 检查是否有"魔术"数字 -->
        <module name="MagicNumber">
            <property name="ignoreNumbers" value="-1,0, 1, 2, 3, 4"/>
            <property name="ignoreAnnotation" value="true"/>
        </module>
        <!-- 检查switch语句是否有default -->
        <module name="MissingSwitchDefault"/>
        <!--　检查循环控制变量是否被修改 -->
        <module name="ModifiedControlVariable"/>
        <!--　检查一个字符串变量在不改变变量值的情况下或者字符串出现的次数
            allowedDuplicates: 定义在类中一个字符串变量在不改变变量值的情况下或者字符串所能使用的最多次数 -->
        <module name="MultipleStringLiterals">
            <property name="allowedDuplicates" value="3"/>
        </module>
        <!-- 检查是否有过度复杂的布尔表达式 -->
        <module name="SimplifyBooleanExpression"/>
        <!-- 检查是否有过于复杂的布尔返回代码段 -->
        <module name="SimplifyBooleanReturn"/>
        <!-- 检查代码中是否使用了不必要的圆括号 -->
        <module name="UnnecessaryParentheses"/>

        <!--　检查一次声明多个变量时，变量是否在同一行或者在同一个语句中 -->
        <module name="MultipleVariableDeclarations"/>

        <!-- 类设计检查 -->
        <!-- 检查类是否被设计为可扩展的，如果是，则方法应该abstract、final或者是空的 -->
        <module name="DesignForExtension"/>
        <!-- 检查只有private构造函数的类是否声明为final -->
        <module name="FinalClass"/>
        <!-- 检查工具类是否有public的构造器 -->
        <!--<module name="HideUtilityClassConstructor"/>-->
        <!-- 检查接口是否仅定义类型 -->
        <module name="InterfaceIsType"/>
        <!-- 检查类成员的可见度 检查类成员的可见性。只有static final 成员是public的
        除非在本检查的protectedAllowed和packagedAllowed属性中进行了设置-->
        <module name="VisibilityModifier">
            <property name="packageAllowed" value="true"/>
            <property name="protectedAllowed" value="true"/>
        </module>
        <!--　将异常抛出语句的数量配置为一个指定的限值（默认值为1）-->
        <module name="ThrowsCount">
            <property name="max" value="7"/>
        </module>
        <!--　检查类成员的可见性。
            只有static final的类成员可以是公有的，其他的类成员必须是私有的，除非设置了protectedAllowed属性或packageAllowed属性
            packageAllowed: 变量包内成员可以访问
            protectedAllowed: 变量是受保护的
            publicMemberPattern: 可以公开访问的变量所匹配的命名形式 -->
        <module name="VisibilityModifier">
            <property name="packageAllowed" value="false"/>
            <property name="protectedAllowed" value="false"/>
            <property name="publicMemberPattern" value="^seriaVersionUID$"/>
        </module>

        <!-- 语法 -->
        <!-- String的比较不能用!= 和 == -->
        <module name="StringLiteralEquality"/>
        <!-- 限制for循环最多嵌套2层 -->
        <module name="NestedForDepth">
            <property name="max" value="2"/>
        </module>
        <!-- if最多嵌套3层 -->
        <module name="NestedIfDepth">
            <property name="max" value="3"/>
        </module>
        <!-- 检查未被注释的main方法,排除以Application结尾命名的类 -->
        <module name="UncommentedMain">
            <property name="excludedClasses" value=".*Application$"/>
        </module>
        <!-- 禁止使用System.out.println -->
        <module name="Regexp">
            <property name="format" value="System\.out\.println"/>
            <property name="illegalPattern" value="true"/>
        </module>
        <!-- return个数 3个-->
        <module name="ReturnCount">
            <property name="max" value="3"/>
        </module>
        <!--try catch 异常处理数量 3-->
        <module name="NestedTryDepth ">
            <property name="max" value="3"/>
        </module>
        <!-- clone方法必须调用了super.clone() -->
        <module name="SuperClone" />
        <!-- finalize 必须调用了super.finalize() -->
        <module name="SuperFinalize" />

        <!-- 确保一个类具有一个包声明，并且（可选地）包名要与源代码文件所在的目录名相匹配 -->
        <module name="PackageDeclaration"/>

        <!-- 不允许对参数进行赋值 -->
        <module name="ParameterAssignment"/>

        <!-- 检查是否使用了this -->
        <module name="RequireThis">
            <property name="checkFields" value="false"/>
            <property name="checkMethods" value="false"/>
        </module>

    </module>
</module>
